# -*- python -*-
# ex: set syntax=python:

repourl = "git://android.git.kernel.org/platform/manifest.git"
manifest_branch="master"

slaves = [ "slave%02d"%(i) for i in xrange(1,2) ]

build_branches = [] 

repotarball="/localdisk/android_repo_bootstrap.tgz"

for i in "passion dream".split(" "):
	build_branches.append([i,"default.xml","master-default"])

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [ BuildSlave(i, i+"pw",max_builds=1) for i in slaves ]
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.gerritchangesource import GerritChangeSource
c['change_source'] = GerritChangeSource("review.source.android.com","tardyp")


####### SCHEDULERS

## configure the Schedulers
buildernames = [ "%s_%s"%(board,manifest) for board, manifest, gerrit_branch in build_branches]

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=2*60,
                                 builderNames=buildernames))
branches = {}
for board, manifest, gerrit_branch in build_branches:
	if not branches.has_key(gerrit_branch):
		branches[gerrit_branch] = []
	branches[gerrit_branch].append("%s_%s"%(board,manifest))

for branch in branches.keys():
	print branch,branches[branch]
	c['schedulers'].append(Scheduler(name=branch, branch=branch,
					 treeStableTimer=None,
					 builderNames=branches[branch]))
	 
 
####### BUILDERS


from buildbot.process import factory
from buildbot.steps.source import Repo
from buildbot.steps.shell import Compile
from buildbot.steps.master import  MasterShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.python_twisted import Trial
from buildbot.config import BuilderConfig
from buildbot.process.properties import WithProperties

builders = []
for board, manifest, gerrit_branch in build_branches:
	f1 = factory.BuildFactory()
	f1.workdir="out"
	f1.addStep(Repo(repourl=repourl, manifest_branch=manifest_branch, manifest=manifest,repotarball=repotarball))
	buildcommand = """
		     set -e
		     cd ..
		     . build/envsetup.sh
		     lunch %s-eng
		     make %s -j4
		     repo manifest -o out/target/product/%s/manifest.xml
		     """%(board,board,board)
	f1.addStep(Compile(command=buildcommand))
	getOutputDir = WithProperties("/var/www/builds/build-%s-%s","buildername","changenumber")
	f1.addStep(MasterShellCommand(command=["mkdir" ,"-m","0755", "-p",getOutputDir]))
	
	for i in "system.tar.gz boot.tar.gz manifest.xml".split(" "):
		getOutputFile = WithProperties("/var/www/builds/build-%s-%s/"+i,"buildername","changenumber")
		f1.addStep(FileUpload(slavesrc="target/product/%s/%s" %(board,i),
				      masterdest=getOutputFile,mode=0644))				      
	getWebDir = WithProperties("http://buildmaster.mysite.com/builds/build-%s-%s","buildername","changenumber")
	f1.addStep(MasterShellCommand(command=["echo" ,getWebDir]))
					 
	builddir="%s_%s"%(board,manifest)
	b1 = BuilderConfig(name=builddir,
			   slavenames=slaves,
			   builddir=builddir,
			   factory=f1)
	builders.append(b1)
c['builders'] = builders


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "froyo"
c['projectURL'] = "http://review.android.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.mysite.com/buildbot"
